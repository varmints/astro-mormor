---
import { Icon } from 'astro-icon'
import ContentSection from '~/components/ContentSection.astro'
import type { FeatureItem } from '~/types'
import { getLocale } from 'astro-i18n-aut'
import { t } from '../utils/i18n.ts'

const locale = getLocale(Astro.url)
const localedData = t(locale)

const features: Array<FeatureItem> = localedData.home.advantagesDetails
---

<ContentSection title={localedData.home.advantages} id="zalety">
	<Fragment set:html={localedData.home.advantagesSubtitle} slot="lead" />
	<ul id="cards" class="">
		{
			features.map(({ title, description, icon }) => (
				<li class="card">
					<div class="invisible flex flex-col items-center gap-4 bg-offset p-6">
						<div class="h-16 w-16 rounded-full border-2 border-current p-3">
							<Icon name={icon} />
						</div>
						<p class="text-center font-extrabold text-xl">{title}</p>
						<p class="text-center text-offset text-sm">{description}</p>
					</div>
					<div class="card-content flex flex-col items-center gap-4 bg-offset p-6">
						<div class="h-16 w-16 rounded-full border-2 border-current p-3">
							<Icon name={icon} />
						</div>
						<p class="text-center font-extrabold text-xl">{title}</p>
						<p class="text-center text-offset text-sm">{description}</p>
					</div>
				</li>
			))
		}
	</ul>
</ContentSection>

<script>
	const carts = document.getElementById('cards')
	carts!.onmousemove = (e) => {
		for (const card of document.getElementsByClassName('card')) {
			const rect = card.getBoundingClientRect(),
				x = e.clientX - rect.left,
				y = e.clientY - rect.top

			card.style.setProperty('--mouse-x', `${x}px`)
			card.style.setProperty('--mouse-y', `${y}px`)
		}
	}
</script>

<style>
	#cards {
		@apply grid max-w-6xl grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3;
	}

	#cards:hover > .card::after {
		@apply opacity-100;
	}

	.card {
		@apply relative flex flex-col;
		background-color: var(--color-border);
	}

	.card:hover::before {
		@apply opacity-100;
	}

	.card::before,
	.card::after {
		content: '';
		height: 100%;
		left: 0px;
		opacity: 0;
		position: absolute;
		top: 0px;
		transition: opacity 500ms;
		width: 100%;
	}

	.card::before {
		background: radial-gradient(
			800px circle at var(--mouse-x) var(--mouse-y),
			rgba(255, 255, 255, 0.06),
			transparent 40%
		);
		z-index: 3;
	}

	.card::after {
		background: radial-gradient(
			600px circle at var(--mouse-x) var(--mouse-y),
			rgba(255, 255, 255, 0.4),
			transparent 40%
		);
		z-index: 1;
	}

	.card > .card-content {
		border-radius: inherit;
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		inset: 1px;
		position: absolute;
		z-index: 2;
	}
</style>
